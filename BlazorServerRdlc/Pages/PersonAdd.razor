@page "/add-person"
@using BlazorServerRdlc.Data
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<ReportDbContext> ContextFactory
@inject NavigationManager Navigation
@inject IConfiguration Configuration

<h3>Add Person</h3>

@if (!string.IsNullOrEmpty(error))
{
    <div style="color:red;">Greška: @error</div>
}

<EditForm Model="@person" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="person.Name" />
        <ValidationMessage For="@(() => person.Name)" />
    </div>
    <div class="form-group">
        <label for="lastName">Last Name:</label>
        <InputText id="lastName" class="form-control" @bind-Value="person.LastName" />
        <ValidationMessage For="@(() => person.LastName)" />
    </div>
    <div class="form-group">
        <label for="attachment">Attachment:</label>
        <InputFile id="attachment" class="form-control" OnChange="HandleFileSelected" multiple />
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    private Person person = new();
    private List<IBrowserFile> files = new List<IBrowserFile>();
    private string error;

    private async Task HandleValidSubmit()
    {
        using var context = ContextFactory.CreateDbContext();
        using var transaction = context.Database.BeginTransaction();
        try
        {
            context.Persons.Add(person);
            await context.SaveChangesAsync();

            foreach (var file in files)
            {
                var allowedContentTypes = new[] { "image/jpeg", "image/jpg", "image/png", "application/pdf" };
                if (!allowedContentTypes.Contains(file.ContentType))
                {
                    error = "Nedozvoljena vrsta datoteke! Dozvoljene vrste datoteka su: jpeg, png i pdf.";
                    return;
                }

                var physicalPath = Configuration["AttachmentsPhysicalPath"];
                var directoryPath = Path.Combine(physicalPath, person.Id.ToString());
                Directory.CreateDirectory(directoryPath);
                var filePath = Path.Combine(directoryPath, file.Name);
                var maxFileSize = 1024 * 1024; //1MB
                using var stream = System.IO.File.Create(filePath);
                using var fileStream = file.OpenReadStream(maxFileSize);
                await fileStream.CopyToAsync(stream);
                var attachment = new Attachment
                    {
                        PersonId = person.Id,
                        FilePath = filePath
                    };
                context.Attachments.Add(attachment);
            }

            await context.SaveChangesAsync();
            await transaction.CommitAsync();
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            await transaction.RollbackAsync();
            error = ex.Message;
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);
        }
    }
}